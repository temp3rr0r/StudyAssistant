{
  "name": "node-dbi",
  "description": "A Database abstraction layer for Node.js, bundled with several DB engines adapters",
  "version": "0.7.1",
  "homepage": "https://github.com/DrBenton/Node-DBI",
  "repository": {
    "type": "git",
    "url": "git://github.com/DrBenton/Node-DBI.git"
  },
  "authors": [
    "Olivier Philippon (http://github.com/DrBenton)",
    "Michael Dwyer (http://github.com/kalifg)",
    "David Schoen <dave@lyte.id.au>",
    "Fabian Bornhofen (http://fabianbornhofen.blogspot.com)"
  ],
  "main": "dbWrapper.js",
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "dependencies": {
    "async": "",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "mocha": "~1.17.0",
    "chai": "~1.8.1",
    "sqlite3": "~2.1.19",
    "mysql": "~2.0.0",
    "mysql-libmysqlclient": "~1.5.2",
    "pg": "~2.11.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "database",
    "SQL",
    "abstraction",
    "common",
    "mysql",
    "sqlite",
    "pg",
    "postgres",
    "postgresql"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "# vim: ts=2 sw=2 et ": null,
  "readme": "# Node-DBI\n\n[![build status](https://secure.travis-ci.org/DrBenton/Node-DBI.png)](http://travis-ci.org/DrBenton/Node-DBI)\n\nNode-DBI is a SQL database abstraction layer library, strongly inspired by the PHP Zend Framework [Zend_Db API](http://framework.zend.com/manual/en/zend.db.html).\nIt provides unified functions to work with multiple database engines, through Adapters classes.\nAt this time, supported engines are [mysql](https://github.com/felixge/node-mysql), [mysql-libmysqlclient](https://github.com/Sannis/node-mysql-libmysqlclient), [sqlite3](https://github.com/developmentseed/node-sqlite3) and [pg](http://github.com/brianc/node-postgres).\n\nIt provides __DBWrapper__ and __DBSelect__ Javascript classes, described later on this document.\n\n## Usage\n\nNode-DBI is primarily an abstraction layer library ; it allows you to have a \"database-agnostic\" application, with a single API for multiple databases engines.\n\nIt provides high-level functions to fecth, insert, update and remove data from the database.\nIt is also bundled with a __DBSelect__ component, used to build SQL queries in a more readable, more flexible and more secure (thanks to is params escaping policy) way than long SQL strings.\n\nNode-DBI imitates the API of the great Open Source PHP database abstraction layer of the [Zend Framework](http://framework.zend.com/), [Zend_Db](http://framework.zend.com/manual/en/zend.db.html), used by thousands of Web developers for several years.\n\nThe example below demonstates the Node-DBI usage:\n\n```javascript\nvar DBWrapper = require('node-dbi').DBWrapper; \nvar DBExpr = require('node-dbi').DBExpr; \nvar dbConnectionConfig = { host: 'localhost', user: 'test', password: 'test', database: 'test' };\n\n// Replace the adapter name with \"mysql\", \"mysql-libmysqlclient\", \"sqlite3\" or \"pg\" on the following line :\ndbWrapper = new DBWrapper( '[DB engine adapter name]', dbConnectionConfig );\ndbWrapper.connect();\n\n// ** fetchAll\ndbWrapper.fetchAll('SELECT * FROM user', null, function(err, result) {\n\tif( ! result )\n\t\tconsole.dir(result);\n\t// \"result\" is an Array with a hash for every returned row\n} );\n\n// ** fetchRow ( +  a safely escaped value ) \ndbWrapper.fetchRow('SELECT * FROM user WHERE first_name=?', ['John'], function(err, result) {\n\tif( ! result )\n\t\tconsole.dir(result);\n\t// this time, \"result\" is a single hash (the first returned row)\n} );\n\n// ** fetchCol  (if you dont' have values to escape, the 2nd param can be an empty Array or \"null\")\ndbWrapper.fetchCol('SELECT first_name FROM user ORDER BY fist_name', null, function(err, result) {\n\tif( ! err )\n\t\tconsole.dir(result);\n\t// \"result\" is an Array with all the names of our users, sorted alphabetically\n} );\n\n// ** fetchOne\ndbWrapper.fetchOne('SELECT fist_name FROM user ORDER BY rank DESC LIMIT 1', [], function(err, result) {\n\tif( ! err )\n\t\tconsole.dir(result);\n\t// \"result\" is the first_name of our best user\n} );\n\n// ** insert   (DBExpr force somes values to be used \"as is\", without safe escape : it is useful for SQL functions like \"NOW()\", \"COUNT(*)\", \"SUM(rank)\"... )\nvar JohnData = { first_name: 'John', last_name: 'Foo', rank: '3', date_created: new DBExpr('NOW()') };\ndbWrapper.insert('user', JohnData , function(err) {\n\tif( ! err )\n\t\tconsole.log( 'John ID : ' + dbWrapper.getLastInsertId() );\n\t// John has been inserted in our table, with its properties safely escaped\n} );\n\n// ** update  ( here the fist name is used as a raw String, but the last name is safely escaped ) \nvar JohnDataUpdate = { rank: '1' };\n\tdbWrapper.update('user', JohnDataUpdate , [ 'first_name=\\'John\\'', ['last_name=?', 'Foo'] ], function(err) {\n\t// John is now our best user. Congratulations, John !\n} );\n\n// ** remove  ( this time, both values are safely escaped ) \ndbWrapper.remove('user', [ ['first_name LIKE ?', '%John%'], ['last_name=?', 'Foo'] ] , function(err) {\n\t// John left at the height of its glory.\n} );\n\n\n// Easy SQL String building\nvar select = dbWrapper.getSelect()\n\t.from('user', ['first_name', 'last_name'] )\n\t.where( 'enabled=1' )\n\t.where( 'id=?', 10 )\n\t.where( 'last_name LIKE ?', '%Foo%' )\n\t.where( 'removal_date=?', null ) // null -> NULL\n\t.where( 'nickname=?', undefined ) // other falsy-but-not-Numbers values -> empty String\n\t.order( 'last_name' )\n\t.limit( 10 );\n\nif( req.params.onlyVerifiedAccounts )\n\tselect.where('verified=1');\n\nconsole.log( select.assemble() );//outputs the SQL query for debug purpose \n\n// You can retrieve the data of this DBSelect with a \"fetch\" method...\ndbWrapper.fetchAll( select, function(err) {} );\n\n// ..or you can trigger a \"fetch\" method directly on it ! \nselect.fetchAll( function(err) {} );\n\n\n// When you have finished working with the database, you can close the connection\ndbWrapper.close( function(err) {console.log('Connection closed !');} );\n```    \n    \nSee the unit tests in the \"test/\" folder for more examples.\n           \n\n## DBWrapper Class\n\nThe __DBWrapper__ Javascript class, which is the only visible part on top on the different database engines adapters, provides the following methods :\n\n * __connect()__ : tell DbWrapper to connect to the database.\n * __fetchAll( sql, bind, callback )__ : fetches all SQL result rows as a Array.\n * __fetchRow( sql, bind, callback )__ : fetches the first row of the SQL result.\n * __fetchCol( sql, bind, callback )__ : fetches the first column of all SQL result rows as an Array.\n * __fetchOne( sql, bind, callback )__ : fetches the first column of the first row of the SQL result.\n * __insert( tableName, data, callback )__ : inserts a table row with specified data, as a hash.\n * __update( tableName, data, where, callback )__ : updates table rows with specified data (as a hash) based on a WHERE clause.\n * __remove( tableName, where, callback )__ : deletes table rows based on a WHERE clause.\n * __getLastInsertId()__ : returns the last inserted Id\n * __isConnected()__ : tells us if the DbWrapper is connected to its database. \n * __getSelect()__ : returns a DBSelect\n * __close()__ : tell DbWrapper to close the database connection.\n\nAll these methods returns exactly the sames results, whatever the chosen database engine is.  \n\n\n## DBSelect Class\n\nFurthermore, Node-DBI provides a DBSelect class which allows easy and readable SQL \"SELECT\" Strings building. At the moment, it provides the following methods :\n\n * __from( tableName, fieldsArray )__ : adds a table in the FROM clause, and adds its fields to the SELECT\n * __where( whereStr, value )__:  \n     * adds a WHERE clause using AND \n     * if __value__ is not null, all the \"?\" occurences in __whereStr__ will be replaced with the safely escaped value\n     * __value__ may be an array, it will be mapped to a parenthesized SQL list\n     * the clause will be surrounded with parenthesis in the generated SQL, this way ```.where('id=? OR name=?')``` will work like it does in ZendDb.\n * __orWhere( whereStr, value )__ : just like __where__ but adds a WHERE clause using OR\n * __whereGroup( num )__ : \n   * opens __num__ parenthetical groupings to WHERE clause (ie adds __num__ open parentheses) \n   * __num__ defaults to 1\n * __whereGroupClose( num )__ :  \n   * closes __num__ parenthetical groupings of WHERE clause (ie adds __num__ closed parentheses)\n   * __num__ defaults to 1\n   * will not close groups that do not exist\n   * open groups will be closed automatically\n * __limit( nbResults, startIndex )__ : \n   * set the LIMIT clause \n   * __startIndex__ param is optional\n * __order( fieldName, direction )__ : \n   * adds a ORDER BY clause \n   * if __direction__ is not set, it will be set to \"ASC\"\n * __join( tableName, joinStr, fieldsArray, joinType )__ : \n   * adds a JOIN clause \n   * if __joinType__ is not set, it will be set to \"INNER\"\n * __distinct()__ : adds a DISTINCT() to the query\n * __groupyBy( fieldName )__ : adds a GROUPY BY clause\n * __assemble()__ : converts ou DBSelect object to an SQL SELECT string.\n\n\n## Install\n\nYou can clone the project from [GitHub](https://github.com/DrBenton/Node-DBI).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install node-dbi\n    \nAll my unit tests run successfully, but well, it still may have bugs. Tell me if you find one ! :-)\n\n\n## Dependencies\n\nNode-DBI supports these database engines, which makes the really hard work :\n\n * [mysql](https://github.com/felixge/node-mysql)\n * [mysql-libmysqlclient](https://github.com/Sannis/node-mysql-libmysqlclient)\n * [sqlite3](https://github.com/developmentseed/node-sqlite3)\n * [pg](http://github.com/brianc/node-postgres)\n \nAny SQL database engine can theorically be added, with only a quick Adapter writing. See the existing Adapters or contact me for help, if you want to add one !\n\n## Testing\n\nTo run tests manual DB configuration is required first.\n\nCopy ```test/config.js.dist``` to ```test/config.js```, and edit this JS file for databases setup if needed.\n\nAccording to Travis CI requirements, MySQL is expected to be available on localhost with user \"root\", empty password and DB \"node_dbi_test\".\n\nE.g. this should work:\n\n\t$ mysql -hlocalhost -uroot node_dbi_test\n\nThis can usually be achieved by installing mysql and at the mysql interactive prompt issuing the following commands:\n\n\tmysql> create database node_dbi_test;\n\tQuery OK, 1 row affected (0.00 sec)\n\tmysql> grant all on node_dbi_test.* to 'root'@'localhost';\n\tQuery OK, 0 rows affected (0.08 sec)\n\nPostgreSQL is similar to MySQL, e.g. this should work:\n\n\t$ $ psql -U postgres -W node_dbi_test\n\tPassword for user postgres: (manually typing empty password here)\n\nOnce PostgreSQL is installed this can usually be achieved with by issuing the following commands at the psql interactive prompt:\n\n\tpostgres=# create user postgres password '';\n\tCREATE ROLE\n\tpostgres=# create database node_dbi_test owner postgres;\n\tCREATE DATABASE\n\n## Driver Differences\n\nCurrently the PostgreSQL driver does not support getLastInsertId().\n\nMySQL and PostgreSQL drivers return JavaScript Date objects when the table data is a date, while SQLite driver do not.\n\n## License\n\nNode-DBI is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DrBenton/Node-DBI/issues"
  },
  "_id": "node-dbi@0.7.1",
  "dist": {
    "shasum": "44636b28651510de04f5c004db68ad316619aecf",
    "tarball": "http://registry.npmjs.org/node-dbi/-/node-dbi-0.7.1.tgz"
  },
  "_from": "node-dbi@",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "dr-benton",
    "email": "olivier@rougemine.com"
  },
  "maintainers": [
    {
      "name": "dr-benton",
      "email": "olivier@rougemine.com"
    }
  ],
  "_shasum": "44636b28651510de04f5c004db68ad316619aecf",
  "_resolved": "https://registry.npmjs.org/node-dbi/-/node-dbi-0.7.1.tgz"
}
